#include <string>
#include <iostream>
#include <fstream>
#include <sstream>
#include <algorithm>
#include <math.h>
#include "io.h"
#include "galaxy.h"
#include "cosmology.h"

Params::Params(std::string input_filename) {

  std::cout << "Reading file: " << input_filename << "\n";

  std::ifstream file(input_filename);
  std::string line, key, value;

  while (std::getline(file, line)) {

    if (line[0] != '#' && line.find("=") != std::string::npos) {

      std::stringstream ss(line);
      std::getline(ss, key, '=');
      std::getline(ss, value);
      key.erase(std::remove(key.begin(), key.end(), ' '), key.end());
      value.erase(std::remove(value.begin(), value.end(), ' '), value.end());

      std::cout << key << "\t" << value << "\n";

      if (key == "data_filename") {
	data_filename = value;
      }
      else if (key == "random_filename") {
	random_filename = value;
      }
      else if (key == "use_weights") {
	use_weights = std::stoi(value);
      }
      else if (key == "n_threads") {
	n_threads = std::stoi(value);
      }
      else if (key == "omega_m") {
	omega_m = std::stod(value);
      }
      else if (key == "h") {
	h = std::stod(value);
      }
      else if (key == "z_min") {
	z_min = std::stod(value);
      }
      else if (key == "z_max") {
	z_max = std::stod(value);
      }
      else if (key == "plot_monopole") {
	plot_monopole = std::stoi(value);
      }
      else if (key == "monopole_filename") {
	monopole_filename = value;
      }
      else if (key == "monopole_log") {
	monopole_log = std::stoi(value);
      }
      else if (key == "monopole_min") {
	monopole_min = std::stod(value);
      }
      else if (key == "monopole_max") {
	monopole_max = std::stod(value);
      }
      else if (key == "monopole_n_bins") {
	monopole_n_bins = std::stoi(value);
      }
      else if (key == "plot_sigma_pi") {
	plot_sigma_pi = std::stoi(value);
      }
      else if (key == "sigma_pi_filename") {
	sigma_pi_filename = value;
      }
      else if (key == "sigma_log") {
	sigma_log = std::stoi(value);
      }
      else if (key == "sigma_min") {
	sigma_min = std::stod(value);
      }
      else if (key == "sigma_max") {
	sigma_max = std::stod(value);
      }
      else if (key == "sigma_n_bins") {
	sigma_n_bins = std::stoi(value);
      }
      else if (key == "pi_log") {
	pi_log = std::stoi(value);
      }
      else if (key == "pi_min") {
	pi_min = std::stod(value);
      }
      else if (key == "pi_max") {
	pi_max = std::stod(value);
      }
      else if (key == "pi_n_bins") {
	pi_n_bins = std::stoi(value);
      }
      else if (key == "plot_s_mu") {
	plot_s_mu = std::stoi(value);
      }
      else if (key == "s_mu_filename") {
	s_mu_filename = value;
      }
      else if (key == "s_log") {
	s_log = std::stoi(value);
      }
      else if (key == "s_min") {
	s_min = std::stod(value);
      }
      else if (key == "s_max") {
	s_max = std::stod(value);
      }
      else if (key == "s_n_bins") {
	s_n_bins = std::stoi(value);
      }
      else if (key == "mu_n_bins") {
	mu_n_bins = std::stoi(value);
      }
      else {
	std::cout << "Key not found:" << key << "\n";
      }

    }
  }

  file.close();


  box_size = -1.0;
  max_r_sq = -1.0;
  if (plot_monopole) {
    if (monopole_max > box_size) {
      box_size = monopole_max;
    }
    if (monopole_max*monopole_max > max_r_sq) {
      max_r_sq = monopole_max*monopole_max;
    }
  }
  if (plot_sigma_pi) {
    if (sigma_max*sigma_max + pi_max*pi_max > box_size*box_size) {
      box_size = sqrtf(sigma_max*sigma_max + pi_max*pi_max);
    }
    if (sigma_max*sigma_max + pi_max*pi_max > max_r_sq) {
      max_r_sq = sigma_max*sigma_max + pi_max*pi_max;
    }
  }
  if (plot_s_mu) {
    if (s_max > box_size) {
      box_size = s_max;
    }
    if (s_max*s_max > max_r_sq) {
      max_r_sq = s_max*s_max;
    }
  }

}

int read_data(std::string filename, Galaxy **cat, Cosmology cosmo, bool use_weights){

  std::cout << "\nReading file: " << filename << "\n";

  std::ifstream file(filename);
	
  if(file.is_open()){
    std::cout << "File successfully opened\n";
  }
  else{
    std::cout << "File not open\n";
  }

  std::string line, part;

  //Count the number of lines in file
  int num_lines = 0;
  while (std::getline(file, line)) {
    if (line[0] != '#' && line != "") 
      ++num_lines;
  }

  std::cout << "Number of lines found: " << num_lines << "\n";

  file.clear();
  file.seekg(0);

  *cat = new Galaxy[num_lines];

  num_lines = 0;
  while (std::getline(file, line)) {
    if (line[0] != '#' && line != "") {

      char sepchar = ' ';
      if (line.find('\t') != std::string::npos)
	sepchar = '\t';
      if (line.find(',') != std::string::npos)
	sepchar = ',';

      std::stringstream ss(line);

      do {
	std::getline(ss, part, sepchar);
      } while (part == "");
      part.erase(std::remove(part.begin(), part.end(), ' '), part.end());
      (*cat)[num_lines].ra = stod(part);

      do {
	std::getline(ss, part, sepchar);
      } while (part == "");
      part.erase(std::remove(part.begin(), part.end(), ' '), part.end());
      (*cat)[num_lines].dec = stod(part);

      do {
	std::getline(ss, part, sepchar);
      } while (part == "");
      part.erase(std::remove(part.begin(), part.end(), ' '), part.end());
      (*cat)[num_lines].z = stod(part);

      if (use_weights) {
	do {
	  std::getline(ss, part, sepchar);
	} while (part == "");
	part.erase(std::remove(part.begin(), part.end(), ' '), part.end());
	(*cat)[num_lines].weight = stof(part);
      } 
      else {
	(*cat)[num_lines].weight = 1.0;
      }

      (*cat)[num_lines].ang_z_to_cartesian(cosmo);

      ++num_lines;

    }
  }

  file.close();

  return num_lines;
}

double ls_estimator(double DD, double DR, double RR, int n_D, int n_R) {

  if (RR == 0)
    return 0;

  double DD_fact = n_R*(n_R - 1.0) / (n_D*(n_D - 1.0));
  double DR_fact = (n_R - 1.0) / (double)n_D;

  return DD_fact*DD / RR - 2.0*DR_fact*DR / RR + 1.0;
}

void output_xi_1D(std::string filename, Hist *DD, Hist *DR, Hist *RR, int n_gals, int n_randoms) {

  std::ofstream file(filename);

  for (int ii = 0; ii < DD->ax->n_bins; ++ii) {

    file << ii << "\t";
    file << DD->ax->bin_centre(ii) << "\t";
    file << DD->ax->bin_width(ii) << "\t";
    file << ls_estimator(2.0*DD->bins[ii], DR->bins[ii], 2.0*RR->bins[ii], n_gals, n_randoms) << "\t";
    file << DD->bins[ii] << "\t";
    file << DR->bins[ii] << "\t";
    file << RR->bins[ii] << "\n";

  }

  file.close();

}

void output_xi_2D(std::string filename, Hist2D *DD, Hist2D *DR, Hist2D *RR, int n_gals, int n_randoms){

  std::ofstream file(filename);

  for (int ii = 0; ii < DD->ax[0]->n_bins; ++ii) {
    for (int jj = 0; jj < DD->ax[1]->n_bins; ++jj) {

      int total_bin = ii*DD->ax[1]->n_bins + jj;

      file << ii << "\t";
      file << jj << "\t";
      file << DD->ax[0]->bin_centre(ii) << "\t";
      file << DD->ax[1]->bin_centre(jj) << "\t";
      file << DD->ax[0]->bin_width(ii) << "\t";
      file << DD->ax[1]->bin_width(jj) << "\t";
      file << ls_estimator(2.0*DD->bins[total_bin], DR->bins[total_bin], 2.0*RR->bins[total_bin], n_gals, n_randoms) << "\t";
      file << DD->bins[total_bin] << "\t";
      file << DR->bins[total_bin] << "\t";
      file << RR->bins[total_bin] << "\n";

    }
  }

  file.close();

}
