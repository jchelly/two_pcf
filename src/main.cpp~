#include "hist.h"
#include "io.h"
#include "cosmology.h"
#include "boxes.h"
#include "galaxy.h"
#include <iostream>
#include <math.h>
#include <omp.h>
#include <time.h>


void auto_correlate(const GalaxyBoxes cat, Hist *s_hist, Hist2D *sig_pi_hist, Hist2D *s_mu_hist, const Params params) {

#pragma omp parallel for schedule(dynamic)
  for (int ii = 0; ii < cat.n_boxes_used; ++ii) {
    for (int adj_id = 0; adj_id < 27; ++adj_id) {

      int jj = adj_id_to_box_index(adj_id, cat.boxes[ii].loc3d, cat.id_to_box_index, cat.n_boxes_3d);
      if (ii == jj) {

	for (int kk = 0; kk < cat.boxes[ii].numgals; ++kk) {
	  for (int ll = kk + 1; ll < cat.boxes[jj].numgals; ++ll) {
					
	    Galaxy *gal_1 = &cat.boxes[ii].gal[kk], *gal_2 = &cat.boxes[jj].gal[ll];
	
	    float diff_vec[3];
	    for (int mm = 0; mm < 3; ++mm) {
	      diff_vec[mm] = gal_1->x[mm] - gal_2->x[mm];
	    }
	    float s = diff_vec[0] * diff_vec[0] + diff_vec[1] * diff_vec[1] + diff_vec[2] * diff_vec[2];

	    if (s < params.max_r_sq) {
	      float weight = gal_1->weight*gal_2->weight;

	      float pi = diff_vec[0] * (gal_1->half_x_norm[0] + gal_2->half_x_norm[0]);
	      pi += diff_vec[1] * (gal_1->half_x_norm[1] + gal_2->half_x_norm[1]);
	      pi += diff_vec[2] * (gal_1->half_x_norm[2] + gal_2->half_x_norm[2]);
	      pi = fabsf(pi);

	      if (params.plot_sigma_pi) {
		sig_pi_hist->add(sqrtf(s - pi*pi), pi, weight);
	      }

	      s = sqrtf(s);

	      if (params.plot_monopole) {
		s_hist->add(s, weight);
	      }
	      if (params.plot_s_mu) {
		s_mu_hist->add(s, pi / s, weight);
	      }
	    }

	  }
	}

      }
      else if (jj > ii) {

	for (int kk = 0; kk < cat.boxes[ii].numgals; ++kk) {
	  for (int ll = 0; ll < cat.boxes[jj].numgals; ++ll) {

	    Galaxy *gal_1 = &cat.boxes[ii].gal[kk], *gal_2 = &cat.boxes[jj].gal[ll];
	
	    float diff_vec[3];
	    for (int mm = 0; mm < 3; ++mm) {
	      diff_vec[mm] = gal_1->x[mm] - gal_2->x[mm];
	    }
	    float s = diff_vec[0] * diff_vec[0] + diff_vec[1] * diff_vec[1] + diff_vec[2] * diff_vec[2];

	    if (s < params.max_r_sq) {
	      float weight = gal_1->weight*gal_2->weight;

	      float pi = diff_vec[0] * (gal_1->half_x_norm[0] + gal_2->half_x_norm[0]);
	      pi += diff_vec[1] * (gal_1->half_x_norm[1] + gal_2->half_x_norm[1]);
	      pi += diff_vec[2] * (gal_1->half_x_norm[2] + gal_2->half_x_norm[2]);
	      pi = fabsf(pi);

	      if (params.plot_sigma_pi) {
		sig_pi_hist->add(sqrtf(s - pi*pi), pi, weight);
	      }

	      s = sqrtf(s);

	      if (params.plot_monopole) {
		s_hist->add(s, weight);
	      }
	      if (params.plot_s_mu) {
		s_mu_hist->add(s, pi / s, weight);
	      }
	    }

	  }
	}

      }

    }
  }

}

void cross_correlate(const GalaxyBoxes cat_1, const GalaxyBoxes cat_2, Hist *s_hist, Hist2D *sig_pi_hist, Hist2D *s_mu_hist, const Params params) {

#pragma omp parallel for schedule(dynamic)
  for (int ii = 0; ii < cat_1.n_boxes_used; ++ii) {
    for (int adj_id = 0; adj_id < 27; ++adj_id) {

      int jj = adj_id_to_box_index(adj_id, cat_1.boxes[ii].loc3d, cat_2.id_to_box_index, cat_2.n_boxes_3d);
      if (jj != -1) {

	for (int kk = 0; kk < cat_1.boxes[ii].numgals; ++kk) {
	  for (int ll = 0; ll < cat_2.boxes[jj].numgals; ++ll) {

	    Galaxy *gal_1 = &cat_1.boxes[ii].gal[kk], *gal_2 = &cat_2.boxes[jj].gal[ll];
	
	    float diff_vec[3];
	    for (int mm = 0; mm < 3; ++mm) {
	      diff_vec[mm] = gal_1->x[mm] - gal_2->x[mm];
	    }
	    float s = diff_vec[0] * diff_vec[0] + diff_vec[1] * diff_vec[1] + diff_vec[2] * diff_vec[2];

	    if (s < params.max_r_sq) {
	      float weight = gal_1->weight*gal_2->weight;

	      float pi = diff_vec[0] * (gal_1->half_x_norm[0] + gal_2->half_x_norm[0]);
	      pi += diff_vec[1] * (gal_1->half_x_norm[1] + gal_2->half_x_norm[1]);
	      pi += diff_vec[2] * (gal_1->half_x_norm[2] + gal_2->half_x_norm[2]);
	      pi = fabsf(pi);

	      if (params.plot_sigma_pi) {
		sig_pi_hist->add(sqrtf(s - pi*pi), pi, weight);
	      }

	      s = sqrtf(s);

	      if (params.plot_monopole) {
		s_hist->add(s, weight);
	      }
	      if (params.plot_s_mu) {
		s_mu_hist->add(s, pi / s, weight);
	      }
	    }

	  }
	}

      }

    }
  }

}

int main(int argc, char *argv[])
{

  if(argc == 2){
    std::cout << "Reading parameter file\n";
  } 
  else {
    std::cout << "Incorrect number of arguments given, exiting\n";
    return(1);
  }

  //Read parameter file
  Params params = Params(argv[1]);
	
  //Set number of threads
  if (params.n_threads == 0) {
#pragma omp parallel
    {
#pragma omp atomic
      ++params.n_threads;
    }
  }
  omp_set_num_threads(params.n_threads);
  std::cout << "\nUsing " << params.n_threads << " threads.\n";

  //Initialise cosmology
  Cosmology cosmo = Cosmology(params.omega_m, params.h, params.z_min, params.z_max, 0.0001, 100);

  //Initialise histograms
  Hist *DD_s = NULL, *DR_s = NULL, *RR_s = NULL;
  if (params.plot_monopole) {
    DD_s = new Hist(params.monopole_min, params.monopole_max, params.monopole_n_bins, params.monopole_log);
    DR_s = new Hist(params.monopole_min, params.monopole_max, params.monopole_n_bins, params.monopole_log);
    RR_s = new Hist(params.monopole_min, params.monopole_max, params.monopole_n_bins, params.monopole_log);
  }

  Hist2D *DD_sig_pi = NULL, *DR_sig_pi = NULL, *RR_sig_pi = NULL;
  if (params.plot_sigma_pi) {
    DD_sig_pi = new Hist2D(params.sigma_min, params.sigma_max, params.sigma_n_bins, params.sigma_log, \
			   params.pi_min, params.pi_max, params.pi_n_bins, params.pi_log);
    DR_sig_pi = new Hist2D(params.sigma_min, params.sigma_max, params.sigma_n_bins, params.sigma_log, \
			   params.pi_min, params.pi_max, params.pi_n_bins, params.pi_log);
    RR_sig_pi = new Hist2D(params.sigma_min, params.sigma_max, params.sigma_n_bins, params.sigma_log, \
			   params.pi_min, params.pi_max, params.pi_n_bins, params.pi_log);
  }

  Hist2D *DD_s_mu = NULL, *DR_s_mu = NULL, *RR_s_mu = NULL;
  if (params.plot_s_mu) {
    DD_s_mu = new Hist2D(params.s_min, params.s_max, params.s_n_bins, params.s_log, \
			 0.0, 1.0, params.mu_n_bins, 0);
    DR_s_mu = new Hist2D(params.s_min, params.s_max, params.s_n_bins, params.s_log, \
			 0.0, 1.0, params.mu_n_bins, 0);
    RR_s_mu = new Hist2D(params.s_min, params.s_max, params.s_n_bins, params.s_log, \
			 0.0, 1.0, params.mu_n_bins, 0);
  }
	
  //Read in data and randoms
  Galaxy *data = NULL, *randoms = NULL;
  int n_gals = read_data(params.data_filename, &data, cosmo, params.use_weights);
  int n_randoms = read_data(params.random_filename, &randoms, cosmo, params.use_weights);

  //Place in boxes
  std::cout << "\n--Boxing Data--\n";
  GalaxyBoxes data_boxes(data, n_gals, randoms, n_randoms, params.box_size);
  std::cout << "\n--Boxing Randoms--\n";
  GalaxyBoxes random_boxes(randoms, n_randoms, data, n_gals, params.box_size);

  time_t start_time, end_time;
  time(&start_time);

  //Run the correlators
  std::cout << "\nCalculating DDs\n";
  auto_correlate(data_boxes, DD_s, DD_sig_pi, DD_s_mu, params);
  std::cout << "Calculating DRs\n";
  cross_correlate(data_boxes, random_boxes, DR_s, DR_sig_pi, DR_s_mu, params);
  std::cout << "Calculating RRs\n";
  auto_correlate(random_boxes, RR_s, RR_sig_pi, RR_s_mu, params);

  time(&end_time);
  std::cout << "\nProgram ran in " << end_time - start_time << " seconds\n";

  //Output result
  std::cout << "\nWriting result to file\n";
  if (params.plot_monopole)
    output_xi_1D(params.monopole_filename, DD_s, DR_s, RR_s, n_gals, n_randoms);
  if (params.plot_sigma_pi)
    output_xi_2D(params.sigma_pi_filename, DD_sig_pi, DR_sig_pi, RR_sig_pi, n_gals, n_randoms);
  if (params.plot_s_mu)
    output_xi_2D(params.s_mu_filename, DD_s_mu, DR_s_mu, RR_s_mu, n_gals, n_randoms);

  return 0;
}
